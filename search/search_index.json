{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Cosmos Official Doc","text":"<p>Welcome to the official documentation for the Cosmos.</p> <p>Please navigate through the sections below to learn more about how to setup and use the whole project.</p>"},{"location":"#table-of-contents","title":"Table of Contents","text":"<ul> <li>Overview</li> <li>Installation and Setup</li> <li>Backend Setup and Configuration</li> <li>Frontend UI Setup and Configuration</li> </ul>"},{"location":"backend/","title":"Backend Setup and Configuration","text":"<p>This section guides you through the modification and configuration of Cosmos backend.</p>"},{"location":"backend/#backend-file","title":"Backend file","text":"<ul> <li> <p>Based on the provided paths, starting from project_root/.</p> </li> <li> <p>Key highlights: Brave core main directory, frontend binding locations, and backend binding locations.</p> </li> <li> <p>Note: Frontend bindings are in browser/ subfolder, backend in app/ subfolder.</p> </li> <li> <p>Use this to navigate and understand file locations for development or building.</p> </li> <li> <p>Try to avoid creating new .cc/.h files or modifying the BUILD.gn file whenever possible, as this can significantly increase compilation difficulty and lead to time-consuming build processes!</p> </li> </ul> <p></p>"},{"location":"backend/#1-backend-file-location","title":"1. Backend file location","text":"<pre><code>project_root/                  # Project root \n\u2514\u2500\u2500 src/                       # Source code directory\n    \u2514\u2500\u2500 brave/                 # Brave core main directory (core functionality and components)\n        \u2514\u2500\u2500 app/               # Application folder (contains backend bindings)\n            \u251c\u2500\u2500 brave_main_delegate.h   # Backend binding header file (defines main delegate class)\n            \u2514\u2500\u2500 brave_main_delegate.cc  # Backend binding source file (implements main delegate logic)\n</code></pre> <p>Bind the backend startup command to the launch (brave_main_delegate) of the Brave browser. This is because initializing the Blackbird backend may take a significant amount of time. Possible future improvements include:</p> <ul> <li>Running the backend in the background to speed up access when Cosmos is launched again.</li> <li>Tightly coupling the backend's lifecycle with the Brave main process, so it shuts down together with the Brave browser.</li> </ul> <p></p>"},{"location":"backend/#2-bravemaindelegate-binding","title":"2. BraveMainDelegate binding","text":"<p>(<code>app\\brave_main_delegate.h</code> - Lines 52-53) </p> <pre><code>base::Process python_backend_process_;  \nvoid PostMainMessageLoopRun();\n</code></pre> <p></p>"},{"location":"backend/#3-backend-process-function","title":"3. Backend process function","text":"<p>(<code>app\\brave_main_delegate.cc</code> - Lines 237-286) </p> <pre><code>std::string process_type = command_line-&gt;GetSwitchValueASCII(switches::kProcessType);\n\n#....\n\n#endif\n\n</code></pre> <p></p>"},{"location":"backend/#4-maintain-backend","title":"4. Maintain backend","text":"<p>PostMainMessageLoopRun() function  (<code>app\\brave_main_delegate.cc</code> - Lines 292-305) </p> <pre><code>void BraveMainDelegate::PostMainMessageLoopRun(){\n    ...\n}\n\n</code></pre>"},{"location":"frontend/","title":"Frontend UI Setup and Configuration","text":"<p>This section guides you through the modification and configuration of Cosmos Frontend UI.</p>"},{"location":"frontend/#frontend-file","title":"Frontend file","text":"<ul> <li> <p>Based on the provided paths, starting from project_root/.</p> </li> <li> <p>Key highlights: Brave core main directory, frontend binding locations, and backend binding locations.</p> </li> <li> <p>Note: Frontend bindings are in browser/ subfolder, backend in app/ subfolder.</p> </li> <li> <p>Use this to navigate and understand file locations for development or building.</p> </li> <li> <p>Try to avoid creating new .cc/.h files or modifying the BUILD.gn file whenever possible, as this can significantly increase compilation difficulty and lead to time-consuming build processes!</p> </li> </ul> <p></p>"},{"location":"frontend/#1-front-file-location","title":"1. Front file location","text":"<pre><code>project_root/                  # Project root \n\u2514\u2500\u2500 src/                       # Source code directory\n    \u2514\u2500\u2500 brave/                 # Brave core main directory (core functionality and components)\n        \u2514\u2500\u2500 browser/           # Browser-specific folder (contains frontend bindings)\n            \u251c\u2500\u2500 brave_browser_main_extra_parts.h   # Frontend binding header file (extra parts definitions)\n            \u2514\u2500\u2500 brave_browser_main_extra_parts.cc  # Frontend binding source file (implements extra parts logic)\n</code></pre>"},{"location":"frontend/#2-frontend-ui-blackbird-view","title":"2. Frontend UI Blackbird View","text":"<p>(<code>app\\brave_browser_main_extra_parts.h</code> - Lines 31-64) </p> <pre><code>class BlackBirdView : public views::View {\n public:\n  BlackBirdView();\n  ~BlackBirdView() override; \n\n  void Show();\n  void OnSendPressed();\n  void AppendOutput(const std::string&amp; line);\n  void UpdateOutputWithFinalResponse(const std::string&amp; final_text);\n  void LaunchWebFetchWindow(const std::string&amp; json_str);\n\n\n private:\n  raw_ptr&lt;views::Label&gt; output_label_ = nullptr;\n  raw_ptr&lt;views::Textfield&gt; input_ = nullptr;\n\n  base::WeakPtrFactory&lt;BlackBirdView&gt; weak_factory_{this};\n};\n</code></pre> <p></p>"},{"location":"frontend/#3-frontend-ui-constructor","title":"3. Frontend UI Constructor","text":"<p>(<code>app\\brave_browser_main_extra_parts.cc</code> - Lines 127-167) </p> <pre><code># Frontend UI Constructor \u2014 almost all UI styles are defined here\nBlackBirdView::BlackBirdView() {\n    ...\n}\n</code></pre> <p></p>"},{"location":"frontend/#4-ui-display-and-configuration","title":"4. UI Display and configuration","text":"<p>BlackBirdView::Show() (<code>app\\brave_browser_main_extra_parts.cc</code> - Lines 173-197) </p> <pre><code># Display configuration\nvoid BlackBirdView::Show() {\n    ...\n}\n</code></pre> <p></p>"},{"location":"frontend/#5-output-concatenate","title":"5. Output concatenate","text":"<p>AppendOutput() (<code>app\\brave_browser_main_extra_parts.cc</code> - Lines 204-215) </p> <pre><code># Append new content below the original output to create a scrollable page\nvoid BlackBirdView::AppendOutput(const std::string&amp; line) {\n    ...\n}\n</code></pre> <p></p>"},{"location":"frontend/#6-send-button-binding","title":"6. Send button binding","text":"<p>OnSendPressed() (<code>app\\brave_browser_main_extra_parts.cc</code> - Lines 217-260) </p> <pre><code># Send request to the backend once \"send\" button is clicked\nvoid BlackBirdView::OnSendPressed() {\n    ...\n}\n</code></pre> <p></p>"},{"location":"frontend/#7-http-request-core","title":"7. HTTP request Core","text":"<p>LaunchWebFetchWindow() (<code>app\\brave_browser_main_extra_parts.cc</code> - Lines 264-398) </p> <pre><code># Send request by WinHTTP, together with streaming response process\nvoid BlackBirdView::LaunchWebFetchWindow(const std::string&amp; json_str) {\n    ...\n}\n</code></pre>"},{"location":"installation/","title":"Installation and Setup","text":"<p>This section guides you through the installation and setup of Cosmos.</p>"},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8 or higher</li> <li>Operating System: Windows</li> <li>Memory: Minimum 8GB RAM (16GB+ recommended)</li> <li>Storage: 80GB+ of storage space is required for compiling the Brave and Chromium engines.</li> <li>Network: Internet connection for model downloads and web features</li> </ul>"},{"location":"installation/#installation-steps","title":"Installation Steps","text":""},{"location":"installation/#1-install-nodejs","title":"1. Install Node.js","text":"<pre><code># Brave uses Node.js for building and managing dependencies.\n\nnode --version  # Should show v16.x or higher\nnpm --version  # Should show v8.x or higher\n\nhttps://nodejs.org/en/download\n</code></pre>"},{"location":"installation/#2-install-brave-browser","title":"2. Install Brave browser","text":"<pre><code># Install via git clone\n\ngit clone git@github.com:brave/brave-core.git path-to-your-project-folder/src/brave\n\ncd path-to-your-project-folder/src/brave\n\nnpm install\n\n# the Chromium source is downloaded, which has a large history (gigabytes of data)\n# this might take really long to finish depending on internet speed\n\nnpm run init \n</code></pre>"},{"location":"installation/#3-compile-brave-browser","title":"3. Compile Brave browser","text":"<pre><code># start the component build compile\nnpm run build\n\n# start the release compile (different from build, not needed until finished)\nnpm run build Release\n</code></pre>"},{"location":"installation/#4-after-compiling-start-the-browser","title":"4. After Compiling, start the browser","text":"<pre><code># Start the Brave browser\nnpm start\n\n# Start the Brave browser build with logging enabled to stderr\n# This is useful for debugging or capturing logs in the terminal\nnpm start -- --enable-logging=stderr\n</code></pre>"},{"location":"installation/#5-install-blackbird-sdk","title":"5. Install Blackbird SDK","text":"<pre><code># Install from source (development)\ngit clone [repository link to be added here]\n\n## for mac users :\npip install -r requirements_mac_updated.txt\n\n## for windows users\ncd blackbird_sdk\n\n# install the requirements\npip install -r requirements.txt\npip install -e .\n# Or install from PyPI (when available)pip install blackbird-sdk\n</code></pre>"},{"location":"installation/#file-structure","title":"File Structure","text":"<p>After you finish Brave compiling and Blackbird SDK installation, structure your files like this:</p> <pre><code>project_root/\n\u251c\u2500\u2500 src/                  # Source code directory\n\u2502   \u2514\u2500\u2500 out/              # Output/build directory\n\u2502       \u2514\u2500\u2500 Component/    # Components folder\n\u2502           \u2514\u2500\u2500 black_bird/  # Blackbird-specific folder\n\u2502               \u251c\u2500\u2500 blackbird_sdk/  # Main Blackbird SDK location\n\u2502               \u2502   \u251c\u2500\u2500 __init__.py     \n\u2502               \u2502   \u251c\u2500\u2500 backends/        \n\u2502               \u2502   \u2514\u2500\u2500 requirements.txt     \n\u2502               \u2514\u2500\u2500 venv/               # Virtual environment folder\n\u2502                   \u251c\u2500\u2500 .env            \n\u2502                   \u251c\u2500\u2500 bin/            \n\u2502                   \u2514\u2500\u2500 Lib/            \n\u2514\u2500\u2500 other_folders/        # Other project folders (e.g., docs, tests)\n</code></pre>"},{"location":"overview/","title":"Overview","text":"<p>This is the user documentation for Cosmos. Cosmos is built on top of the open-source Brave browser and integrates the Black Bird SDK, enabling AI-assisted functionalities within the browser.</p> <p>Keep reading other sections for a step-by-step guide.</p>"}]}